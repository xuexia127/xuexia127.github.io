<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python演奏音乐</title>
      <link href="/2025/05/05/yin_yue/"/>
      <url>/2025/05/05/yin_yue/</url>
      
        <content type="html"><![CDATA[<h1 id="使用Python演奏音乐"><a href="#使用Python演奏音乐" class="headerlink" title="使用Python演奏音乐"></a><strong>使用Python演奏音乐</strong></h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>这个小项目来源于知乎，非原创。文章地址：<a href="https://zhuanlan.zhihu.com/p/208556304">用Python编歌给自己听 - 知乎 (zhihu.com)</a>，这是一个非常有趣的小项目。如标题所示，这个小项目是基于Python开发的，完成这个项目需要一定的乐理基础。当然，零基础也可以，只要学会如何看简谱即可演奏出好听的音乐。</p><p><em>注：该项目目前还不完善，并不能实现踏板的效果，但是不会影响听感，后续有空我会试着实现出踏板的效果</em></p><h2 id="准备工作："><a href="#准备工作：" class="headerlink" title="准备工作："></a>准备工作：</h2><p>在开始演奏音乐之前，需要提前做好一些准备：</p><p><strong>1. 一张五线谱：</strong>找一张你喜欢的音乐的五线谱。如果不知道在哪里找五线谱的推荐网址：<a href="https://www.midishow.com/">MidiShow - 领先的MIDI音乐交流与下载网站</a>。<br>​<strong>2. 下载库文件：</strong>我已经准备好了项目所需要的代码文件，请自行下载【python编歌】。夸克网盘：<a href="https://pan.quark.cn/s/9bd34d9b8a70">https://pan.quark.cn/s/9bd34d9b8a70</a><br>​<strong>3. 安装依赖：</strong>打开Pycharm，点击左下角的命令行终端输入以下代码：</p><p><img src="D:\暂存\yi_lai.png"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install pygame</span><br><span class="line">pip install midiutil</span><br></pre></td></tr></table></figure><h2 id="程序介绍："><a href="#程序介绍：" class="headerlink" title="程序介绍："></a>程序介绍：</h2><p>在开始编写音乐之前，我们先来了解一下程序都由哪些部分组成。这样在接下来的代码编写时才不会稀里糊涂的。<br>    这个项目由：Lemon_player.py、music.py、MIDIMusicScales.py三个文件组成，如图所示：</p><p>​<img src="D:\暂存\图片\其他\6336.png" style="zoom: 80%;" /><br><em>注：图片中的 Kohana_Lam.py 与 music.py 作用相同， Lemon.MID 为程序生成的文件用于播放音乐</em></p><p>下面详细介绍一下每个文件的作用：</p><h3 id="Lemon-player-py："><a href="#Lemon-player-py：" class="headerlink" title="Lemon_player.py："></a><strong>Lemon_player.py：</strong></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">from</span> music <span class="keyword">import</span> music     <span class="comment"># 导入需要播放的音乐文件</span></span><br><span class="line"></span><br><span class="line">midi_music = music()</span><br><span class="line">music = midi_music.generator()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 混音器参数</span></span><br><span class="line">freq = <span class="number">44100</span><span class="comment"># 采样率</span></span><br><span class="line">bit_size = -<span class="number">16</span><span class="comment"># 位深度</span></span><br><span class="line">channels = <span class="number">2</span><span class="comment"># 声道数</span></span><br><span class="line">buffer = <span class="number">2048</span><span class="comment"># 缓冲区大小</span></span><br><span class="line"></span><br><span class="line">pygame.mixer.init(freq, bit_size, channels, buffer)</span><br><span class="line">clock = pygame.time.Clock()</span><br><span class="line">pygame.mixer.music.load(<span class="string">&quot;&#123;&#125;.MID&quot;</span>.<span class="built_in">format</span>(music))<span class="comment"># 获取音乐文件名用于 .MID文件命名</span></span><br><span class="line">pygame.mixer.music.play()<span class="comment"># 播放音乐</span></span><br><span class="line"><span class="keyword">while</span> pygame.mixer.music.get_busy():</span><br><span class="line">    clock.tick(<span class="number">30</span>) <span class="comment"># 控制帧速率</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em>Pygame</em> 是一个流行的Python游戏开发库，感兴趣的同学可以去了解一下，这里就不多赘述了。我们使用其中有关声音的功能来加载、播放音乐文件。</p><p>这个文件的主要功能是初始化 <em>Pygame</em> 混音器，加载并播放音乐文件。可以理解为：这是一个可以设置混音器参数和控制帧速率的音乐播放器。我们稍后写出来的音乐文件就是靠这一块的代码来播放的。</p><h3 id="music-py："><a href="#music-py：" class="headerlink" title="music.py："></a>music.py：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> MIDIMusicScales <span class="keyword">import</span> Scales</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">music</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = <span class="string">&quot;Lemon&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.lemon = Scales(<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generator</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; ---音乐部分--- &quot;&quot;&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;&#123;&#125;.MID&quot;</span>.<span class="built_in">format</span>(<span class="variable language_">self</span>.name), <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> output_file:</span><br><span class="line">            <span class="variable language_">self</span>.lemon.get_midi().writeFile(output_file)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.name</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个文件的作用是定义一个用于生成音乐文件的类 <em>music</em> 其中包含了初始化对象状态的构造函数和一个生成音乐文件的方法，通过调用这个类的  <em>generator</em> 方法，可以生成一个 <em>MIDI</em> 音乐文件，并返回文件名。</p><p>我们将在这个文件中的 <em>“音乐部分”</em> 下方编写我们的音乐，那么问题来了，我们应该如何编写，或者说我们应该写什么？请看接下来的文件：</p><h3 id="MIDIMusicScales-py："><a href="#MIDIMusicScales-py：" class="headerlink" title="MIDIMusicScales.py："></a>MIDIMusicScales.py：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ------------------------------------------------------------------------------ #</span></span><br><span class="line"><span class="comment">#   #  ||  C  |  C# |  D  |  D# |  E  |  F  |  F# |  G  |  G# |  A  |  A# |  B   #</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------------------------ #</span></span><br><span class="line"><span class="comment">#   0  ||   0 |   1 |   2 |   3 |   4 |   5 |   6 |   7 |   8 |   9 |  10 |  11  #</span></span><br><span class="line"><span class="comment">#   1  ||  12 |  13 |  14 |  15 |  16 |  17 |  18 |  19 |  20 |  21 |  22 |  23  #</span></span><br><span class="line"><span class="comment">#   2  ||  24 |  25 |  26 |  27 |  28 |  29 |  30 |  31 |  32 |  33 |  34 |  35  #</span></span><br><span class="line"><span class="comment">#   3  ||  36 |  37 |  38 |  39 |  40 |  41 |  42 |  43 |  44 |  45 |  46 |  47  #</span></span><br><span class="line"><span class="comment">#   4  ||  48 |  49 |  50 |  51 |  52 |  53 |  54 |  55 |  56 |  57 |  58 |  59  #</span></span><br><span class="line"><span class="comment">#   5  ||  60 |  61 |  62 |  63 |  64 |  65 |  66 |  67 |  68 |  69 |  70 |  71  #</span></span><br><span class="line"><span class="comment">#   6  ||  72 |  73 |  74 |  75 |  76 |  77 |  78 |  79 |  80 |  81 |  82 |  83  #</span></span><br><span class="line"><span class="comment">#   7  ||  84 |  85 |  86 |  87 |  88 |  89 |  90 |  91 |  92 |  93 |  94 |  95  #</span></span><br><span class="line"><span class="comment">#   8  ||  96 |  97 |  98 |  99 | 100 | 101 | 102 | 103 | 104 | 105 | 106 | 107  #</span></span><br><span class="line"><span class="comment">#   9  || 108 | 109 | 110 | 111 | 112 | 113 | 114 | 115 | 116 | 117 | 118 | 119  #</span></span><br><span class="line"><span class="comment">#   10 || 120 | 121 | 122 | 123 | 124 | 125 | 126 | 127 |                        #</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------------------------ #</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em>注：这里是音阶的总览表，原文件中也有。</em></p><p>文件中定义了用于音乐编写的音阶，我们将 <em>MIDIMusicScales.py</em> 导入到 <em>music.py</em> 中，通过调用类的方法来添加不同音高的音符，从而实现音乐的编写。</p><p><strong>接下来 我们学着看懂这张表：</strong></p><p>首先看一下表格的第一行：CDEFGAB 这个就不多解释了，对应着7个音阶，而带有 <em>#</em> 号的则表示对应的音的升半调。这里也可以用作表示降半调，<em>例如：</em>E 升半调可以用 F 表示，降半调则可以用 D# 表示。</p><p>然后我们再来看表格左边第一列：这里的数字是 <em>音区</em> 的编号，中音区的编号为 <em>5</em> ，如图所示：</p><p><img src="D:\暂存\图片\其他\CD45.png"></p><p><em>注：这里使用钢琴键表示是为了更直观的表达</em></p><p>一般我们称 <em>中音区</em> 的 C调 为 <strong>中央C</strong>，在上面的总览表中以 <strong>C5</strong> 来表示，其余的音同理：<em>D5 E5 F5 G5 A5 B5</em>。往左的音区编号为：4、3…，往右则为：6、7…。每个音区的音的表达方式与中音区的同理。</p><p>到此我们已经大致学会了看总览表，下面来举个例子，帮助大家更好的了解如何使用音阶：</p><p>假设我想发出c5的音，我们可以这么写：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">self</span>.lemon.c5(<span class="number">1.2</span>, <span class="number">120</span>)</span><br></pre></td></tr></table></figure><p>这句代码的意思是：让 <em>c5</em> 发声，持续 <em>1.2</em> 秒，声音大小为 <em>120</em>。是不是有些看不懂？让我们结合c5的定义来看：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ------------------------------- C5 ------------------------------- #</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">c5</span>(<span class="params">self, duration=<span class="number">1</span>, volume=<span class="number">100</span></span>):</span><br><span class="line">        pitch = <span class="number">60</span></span><br><span class="line">        <span class="variable language_">self</span>.MyMIDI.addNote(<span class="variable language_">self</span>.track, <span class="variable language_">self</span>.channel, pitch, <span class="variable language_">self</span>.time, duration, volume)</span><br><span class="line">        <span class="variable language_">self</span>.time += duration</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em>注：定义可以在 MIDIMusicScales.py 文件中查看</em></p><p>原来，在定义中给每个音都定义了两个参数 <em>duration</em> 和 <em>volume</em> ，其中 <em>duration</em> 表示音的持续时间，<em>volume</em> 表示声音的大小（可以体现出伴奏效果）。如果括号内不填入参数则默认为持续时间 1，声音大小 100。</p><p>到此为止，我们已经了解完了基本的编写方式。不过，这还不足以编写出一首完整的歌，还缺少一个很重要的函数，它决定了我们的音乐是否可以流畅、动听。请接着往下看：</p><h3 id="modify-time函数："><a href="#modify-time函数：" class="headerlink" title="modify_time函数："></a>modify_time函数：</h3><p>这个函数本质上是为了做到音程、和弦等效果。在时间轴上，比如上一个音持续了一秒，那么下一个音是在那一秒后在演奏的，<em>modify_time</em> 函数可以让时间轴倒退从而实现音程效果。</p><p>比如我想让 <em>a3</em> 和 <em>a4</em> 同时响起，那么可以这么写：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">self</span>.lemon.a3(<span class="number">0.6</span>, <span class="number">127</span>)</span><br><span class="line"><span class="variable language_">self</span>.lemon.modify_time(-<span class="number">0.6</span>)</span><br><span class="line"><span class="variable language_">self</span>.lemon.a4(<span class="number">0.6</span>, <span class="number">127</span>)</span><br></pre></td></tr></table></figure><p>在这段代码中，我让 <em>a3</em> 发声 <em>0.6</em> 秒，然后调用 <em>modify_time</em> 函数传入 -<em>0.6</em>，再让 <em>a4</em> 发声 <em>0.6</em> 秒，意为：让时间轴倒退 <em>0.6</em> 秒再让 <em>a4</em> 发声。这样就实现了两个音同时响起。</p><p>再比如，我想让 <em>a3</em> 发声 <em>1.2</em> 秒， <em>a4</em> 发声 <em>0.6</em> 秒，两个音同时结束，可以这么写：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">self</span>.lemon.a3(<span class="number">1.2</span>, <span class="number">127</span>)</span><br><span class="line"><span class="variable language_">self</span>.lemon.modify_time(-<span class="number">0.6</span>)</span><br><span class="line"><span class="variable language_">self</span>.lemon.a4(<span class="number">0.6</span>, <span class="number">127</span>)</span><br></pre></td></tr></table></figure><p>让时间轴倒退刚好足够 <em>a4</em> 发声的时间，就可以实现两个持续时间不同的音同时结束了。</p><p>再比如，我想让 <em>a3</em> 发声 <em>1.2</em> 秒，间隔 <em>0.6</em> 秒后 <em>a4</em> 再发声 <em>0.6</em> 秒。可以这么写：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">self</span>.lemon.a3(<span class="number">1.2</span>, <span class="number">127</span>)</span><br><span class="line"><span class="variable language_">self</span>.lemon.modify_time(<span class="number">0.6</span>)</span><br><span class="line"><span class="variable language_">self</span>.lemon.a4(<span class="number">0.6</span>, <span class="number">127</span>)</span><br></pre></td></tr></table></figure><p><em>modify_time</em> 函数中传入的参数为负，可以实现时间轴倒退；参数为正则类似延时函数效果。</p><p><em>注：使用 modify_time 函数时请不要倒退大于整个音乐的时间，否则会出现报错。</em></p><p>到此为止，我们已经学习了两类函数，终于可以去编写音乐了。编写音乐虽然简单，但整首曲子的代码量重复度高并且很长，编写时请注意写好注释避免看不明白。</p><p>这里附上我自己编写的成品：</p><p>「僕は…」：<a href="https://www.bilibili.com/video/BV1qt421t7nm/?spm_id_from=333.999.0.0&vd_source=38b4abc1627dc27f6ad44eb40880dd05">《我心里危险的东西》第二季OP「僕は…」| 2.0_哔哩哔哩_bilibili</a></p><p>以上便是整篇文章的内容，希望能够帮助到大家，也希望大家都能编写出自己喜欢的音乐。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>很高兴见到你</title>
      <link href="/2025/04/20/hello-world/"/>
      <url>/2025/04/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>欢迎来到我的博客，该站创建于2025年4月22日的凌晨三点，我将在这个博客中记录我的学习笔记以及趣事。</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
